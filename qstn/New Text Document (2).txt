package com.wecp.library.controller;

 

import com.wecp.library.controller.exception.UserNotSubscribedException;

import com.wecp.library.domain.Issue;

import com.wecp.library.domain.User;

import com.wecp.library.repository.IssueRepository;

import com.wecp.library.repository.UserRepository;

 

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.ResponseEntity;

import org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter;

import org.springframework.web.bind.annotation.*;

 

import java.util.Optional;

 

/**

 * REST controller for managing library system process

 */

@RestController

@RequestMapping("/api/v1")

public class LibraryController {

@Autowired

IssueRepository irepo;

@Autowired

UserRepository repo;

    /**

     * {@code POST  /issueBook} : Create a new issue.

     *

     * @param issue the issue to create.

     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body

     * the user, or if does not exist, return with status "noContent".

     * If user is not subscribed, throw {@link UserNotSubscribedException}

     */

    @PostMapping("/issue-book")

    public ResponseEntity<Issue> issueBook(@RequestBody Issue issue) {

       Optional<User>opuser=repo.findById(issue.getUser().getid());
User user=opuser.get();
	if(opuser.isEmpty){
return ResponseEntity.noContent().build();
}
    else{
if(user.getSub==false)
throw new UserNotSubscribedException();
}  
return ResponseEntity.ok().body(irepo.save(issue)); 
    }

 

    /**

     * {@code POST  /user} : Create a new user.

     *

     * @param user the user to create.

     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the new user

     */

    @PostMapping("/user")

    public ResponseEntity<User> createUser(@RequestBody User user) {
    
     return ResponseEntity.ok().body(repo.save(user));   

    }

 

    /**

     * {@code GET  /renew-user-subscription/:id} :  Send userId, set user subscription to true

     *

     * @param id the id of the user to renew subscription.

     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body

     * the user, or if does not exist, return with status "noContent".

     */

    @GetMapping("renew-user-subscription/{id}")

    public ResponseEntity<User> renewUserSubscription(@PathVariable Long id) {

      
       Optional<User>opuser=repo.findById(id);
User user=opuser.get();
	if(opuser.isEmpty){
return ResponseEntity.noContent().build();
} 
user.set(true);
return ResponseEntity.ok().body(repo.save(user));
}

 











/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






package com.ust.carapp.controller;

 

import java.util.List;
import java.util.Optional;

 

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

 

import com.ust.carapp.model.Car;
import com.ust.carapp.repository.CarRepo;

 

@RestController
@RequestMapping("/api/car")
public class CarController {
    @Autowired
    private CarRepo repo;

 

    @PostMapping("/addcar")
    public ResponseEntity<Car> addcar(@RequestBody Car car) {
return ResponseEntity.ok().body(repo.save(car));
        
    }

 

    @PutMapping("/{id}")
    public ResponseEntity<Car> updatecar(@PathVariable int id, @RequestBody Car car) {
Optional<Car>opcar=repo.findById(id);

if(opcar.isEmpty())
return ResponseEntity.noContent().build();
 else
return ResponseEntity.ok().body(repo.save(car)) ;     
        }

 

    }
    @GetMapping("/{id}")
    public ResponseEntity<Car>getid (@PathVariable int id){
        Optional<Car>opcar=repo.findById(id);
Car car=opcar.get();
if(opcar.isEmpty())
return ResponseEntity.noContent().build();
else
return ResponseEntity.ok().body(car);
        
    }
    @DeleteMapping("/{id}")
    public ResponseEntity<Void>delete(@PathVariable int id){
Optional<Car>c=repo.findById(id);
if(opcar.isEmpty())
return ResponseEntity.noContent().build();
else
repo.deleteById(id);

 return ResponseEntity.ok().build();       
    }
    @GetMapping
    public ResponseEntity<List<Car>> getAll(){
        List<Car>c=repo.findAll();
return ResponseEntity.ok().body(c);
}




















